{"ast":null,"code":"import _classCallCheck from \"/Users/johnbender/Documents/savings-calculator/savingscalculator/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/johnbender/Documents/savings-calculator/savingscalculator/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/johnbender/Documents/savings-calculator/savingscalculator/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/johnbender/Documents/savings-calculator/savingscalculator/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/johnbender/Documents/savings-calculator/savingscalculator/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/johnbender/Documents/savings-calculator/savingscalculator/src/components/FieldGenerator/FieldGenerator.js\";\nimport React from \"react\"; //need to modify to affect App.js state\n//import the Wizards into App.js instead and add conditionals to CreateFields in App.js\n\nvar FieldGenerator =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(FieldGenerator, _React$Component);\n\n  function FieldGenerator() {\n    var _this;\n\n    _classCallCheck(this, FieldGenerator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FieldGenerator).call(this));\n\n    _this.addPercentField = function () {\n      var percentArrayLength = _this.state.addPercentField.length;\n\n      if (percentArrayLength === 0) {\n        _this.push(\"percentWizard\");\n      } else {\n        _this.push(\"percentWizard\" + {\n          percentArrayLength: percentArrayLength\n        });\n      }\n    };\n\n    _this.addDollarField = function () {\n      var dollarArrayLength = _this.state.addDollarField.length;\n\n      if (DollarArrayLength === 0) {\n        _this.push(\"percentWizard\");\n      } else {\n        _this.push(\"percentWizard\" + {\n          percentArrayLength: percentArrayLength\n        });\n      }\n    };\n\n    _this.onPercentCreate = function () {\n      _this.setState({\n        addPercentField: _this.state.addPercentField\n      });\n    };\n\n    _this.onDollarCreate = function () {\n      _this.setState({\n        addDollarField: _this.state.addDollarField\n      });\n    };\n\n    _this.state = {\n      addPercentField: [],\n      addDollarField: []\n    };\n    return _this;\n  }\n\n  _createClass(FieldGenerator, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"tc\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"What type of pricing do you use? (add as many as needed)\"), React.createElement(\"button\", {\n        className: \"\",\n        onClick: this.onPercentCreate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Percentage (%)\"), React.createElement(\"button\", {\n        className: \"\",\n        onClick: this.onDollarCreate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Dollar ($)\"));\n    }\n  }]);\n\n  return FieldGenerator;\n}(React.Component);\n\nexport default FieldGenerator;","map":{"version":3,"sources":["/Users/johnbender/Documents/savings-calculator/savingscalculator/src/components/FieldGenerator/FieldGenerator.js"],"names":["React","FieldGenerator","addPercentField","percentArrayLength","state","length","push","addDollarField","dollarArrayLength","DollarArrayLength","onPercentCreate","setState","onDollarCreate","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;;IACMC,c;;;;;AACF,4BAAc;AAAA;;AAAA;;AACV;;AADU,UAQdC,eARc,GAQI,YAAM;AACpB,UAAMC,kBAAkB,GAAC,MAAKC,KAAL,CAAWF,eAAX,CAA2BG,MAApD;;AACA,UAAIF,kBAAkB,KAAK,CAA3B,EAA8B;AAC9B,cAAKG,IAAL;AACC,OAFD,MAEO;AACH,cAAKA,IAAL,CAAU,kBAAkB;AAACH,UAAAA,kBAAkB,EAAlBA;AAAD,SAA5B;AACH;AACJ,KAfa;;AAAA,UAiBdI,cAjBc,GAiBG,YAAM;AACnB,UAAMC,iBAAiB,GAAC,MAAKJ,KAAL,CAAWG,cAAX,CAA0BF,MAAlD;;AACA,UAAII,iBAAiB,KAAK,CAA1B,EAA6B;AAC7B,cAAKH,IAAL;AACC,OAFD,MAEO;AACH,cAAKA,IAAL,CAAU,kBAAkB;AAACH,UAAAA,kBAAkB,EAAlBA;AAAD,SAA5B;AACH;AACJ,KAxBa;;AAAA,UA0BdO,eA1Bc,GA0BI,YAAM;AACxB,YAAKC,QAAL,CAAc;AAACT,QAAAA,eAAe,EAAE,MAAKE,KAAL,CAAWF;AAA7B,OAAd;AACC,KA5Ba;;AAAA,UA8BdU,cA9Bc,GA8BG,YAAM;AACvB,YAAKD,QAAL,CAAc;AAACJ,QAAAA,cAAc,EAAE,MAAKH,KAAL,CAAWG;AAA5B,OAAd;AACC,KAhCa;;AAEV,UAAKH,KAAL,GAAa;AACTF,MAAAA,eAAe,EAAE,EADR;AAETK,MAAAA,cAAc,EAAE;AAFP,KAAb;AAFU;AAMX;;;;6BA4BM;AACT,aACI;AAAK,QAAA,SAAS,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEADJ,EAEI;AACA,QAAA,SAAS,EAAC,EADV;AAEA,QAAA,OAAO,EAAE,KAAKG,eAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFJ,EAMI;AACA,QAAA,SAAS,EAAC,EADV;AAEA,QAAA,OAAO,EAAE,KAAKE,cAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBANJ,CADJ;AAaH;;;;EAjD4BZ,KAAK,CAACa,S;;AAoDnC,eAAeZ,cAAf","sourcesContent":["import React from \"react\";\n\n//need to modify to affect App.js state\n//import the Wizards into App.js instead and add conditionals to CreateFields in App.js\nclass FieldGenerator extends React.Component { \n    constructor() {\n        super();\n        this.state = {\n            addPercentField: [],\n            addDollarField: []\n        }\n      }\n\n    addPercentField = () => {\n        const percentArrayLength=this.state.addPercentField.length;\n        if (percentArrayLength === 0) {\n        this.push(`percentWizard`)\n        } else {\n            this.push(`percentWizard` + {percentArrayLength})\n        }\n    }\n\n    addDollarField = () => {\n        const dollarArrayLength=this.state.addDollarField.length;\n        if (DollarArrayLength === 0) {\n        this.push(`percentWizard`)\n        } else {\n            this.push(`percentWizard` + {percentArrayLength})\n        }\n    }\n\n    onPercentCreate = () => {\n    this.setState({addPercentField: this.state.addPercentField});\n    }\n    \n    onDollarCreate = () => {\n    this.setState({addDollarField: this.state.addDollarField});\n    }\n    \n    render() {\n    return (\n        <div className=\"tc\">\n            <p>What type of pricing do you use? (add as many as needed)</p>\n            <button\n            className=\"\"\n            onClick={this.onPercentCreate}\n            >Percentage (%)</button>\n            <button\n            className=\"\"\n            onClick={this.onDollarCreate}\n            >Dollar ($)</button>\n        </div>\n    )\n}\n}\n\nexport default FieldGenerator;"]},"metadata":{},"sourceType":"module"}